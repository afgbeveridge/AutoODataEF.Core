

// ************************************************************************************************************************
//
// IMPORTANT NOTE:
// This file has been auto generated. Modifications by hand will be overwritten the next time the T4 template is processed
//
// ************************************************************************************************************************
//
// Generation date: Wednesday, 26 April 2017 at 9:08:17 AM
// Machine name: TONY-PC
//

using System;
using System.Linq;
using System.Linq.Expressions;
using Microsoft.EntityFrameworkCore;
using System.Threading.Tasks;
using System.Reflection;
using System.Dynamic;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.OData.Routing;
using System.Collections.Generic;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.OData;
using Microsoft.AspNetCore.OData.Builder;
using Microsoft.AspNetCore.OData.Extensions;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.OData.Edm;
using API.Generation.Support.Repository;
using API.Generation.Support.Mvc;
using API.Generation.Support.Proxies;
using EF.Example;

namespace Autogenerated.OData.Api {

#region Proxies

				public class ProductsProxy : Proxy<ICompanyContext, EF.Example.Product>  {
				public ProductsProxy(IInterventionProxy<ICompanyContext, EF.Example.Product> proxy = null) : base(proxy) { 
				}

				public override EF.Example.Product PreCreate(ICompanyContext ctx, EF.Example.Product entity) { 
					entity.OurProductId = default(System.Guid);
								return base.PreCreate(ctx, entity); 	
				}

				

			}
						public class SuppliersProxy : Proxy<ICompanyContext, EF.Example.Supplier>  {
				public SuppliersProxy(IInterventionProxy<ICompanyContext, EF.Example.Supplier> proxy = null) : base(proxy) { 
				}

				public override EF.Example.Supplier PreCreate(ICompanyContext ctx, EF.Example.Supplier entity) { 
					entity.SupplierId = default(System.Int32);
								return base.PreCreate(ctx, entity); 	
				}

				

			}
						public class ClientsProxy : Proxy<ICompanyContext, EF.Example.Customer>  {
				public ClientsProxy(IInterventionProxy<ICompanyContext, EF.Example.Customer> proxy = null) : base(proxy) { 
				}

				public override EF.Example.Customer PreCreate(ICompanyContext ctx, EF.Example.Customer entity) { 
					entity.CustomerId = default(System.Int32);
									entity.Orders = null;
								return base.PreCreate(ctx, entity); 	
				}

				

			}
						public class OrdersProxy : Proxy<ICompanyContext, EF.Example.Order>  {
				public OrdersProxy(IInterventionProxy<ICompanyContext, EF.Example.Order> proxy = null) : base(proxy) { 
				}

				public override EF.Example.Order PreCreate(ICompanyContext ctx, EF.Example.Order entity) { 
					entity.OrderId = default(System.Int32);
								return base.PreCreate(ctx, entity); 	
				}

				

			}
			
#endregion

#region Startup support

     public static class ODataEfApiGeneratorExtensions {

        public static void AddODataEFGenerator(this IServiceCollection services) {
            services.AddOData();
            services.Add(ServiceDescriptor.Scoped(typeof(IProxy<,>), typeof(Proxy<,>)));
						services.AddScoped<IBaseRepository<ICompanyContext, EF.Example.Product, System.Guid>, ProductsRepository>();
			services.AddScoped<IProxy<ICompanyContext, EF.Example.Product>, ProductsProxy>();
						services.AddScoped<IBaseRepository<ICompanyContext, EF.Example.Supplier, System.Int32>, SuppliersRepository>();
			services.AddScoped<IProxy<ICompanyContext, EF.Example.Supplier>, SuppliersProxy>();
						services.AddScoped<IBaseRepository<ICompanyContext, EF.Example.Customer, System.Int32>, ClientsRepository>();
			services.AddScoped<IProxy<ICompanyContext, EF.Example.Customer>, ClientsProxy>();
						services.AddScoped<IBaseRepository<ICompanyContext, EF.Example.Order, System.Int32>, OrdersRepository>();
			services.AddScoped<IProxy<ICompanyContext, EF.Example.Order>, OrdersProxy>();
			        }

        public static void UseODataEFGenerator(this IApplicationBuilder app) {
            var provider = app.ApplicationServices.GetRequiredService<IAssemblyProvider>();
            app.UseMvc(builder => builder.MapODataRoute("odata", GetEdmModel(provider)));
        }

        private static IEdmModel GetEdmModel(IAssemblyProvider assemblyProvider) {
            var builder = new ODataConventionModelBuilder(assemblyProvider);
						builder.EntitySet<EF.Example.Product>("Products");
			builder.EntityType<EF.Example.Product>().HasKey(x => x.OurProductId);
						builder.EntitySet<EF.Example.Supplier>("Suppliers");
			builder.EntityType<EF.Example.Supplier>().HasKey(x => x.SupplierId);
						builder.EntitySet<EF.Example.Customer>("Clients");
			builder.EntityType<EF.Example.Customer>().HasKey(x => x.CustomerId);
						builder.EntitySet<EF.Example.Order>("Orders");
			builder.EntityType<EF.Example.Order>().HasKey(x => x.OrderId);
			           
            return builder.GetEdmModel();
        }
    }

#endregion



		#region Products repository
	public partial class ProductsRepository : BaseRepository<ICompanyContext, EF.Example.Product, System.Guid>, IBaseRepository<ICompanyContext, EF.Example.Product, System.Guid> {

        public ProductsRepository(ICompanyContext ctx, IProxy<ICompanyContext, EF.Example.Product> proxy = null) : base(ctx, proxy) {
        }

		protected override async Task<EF.Example.Product> GetAsync(IQueryable<EF.Example.Product> query, System.Guid key) { 
			return await query.FirstOrDefaultAsync(obj => obj.OurProductId == key);
		}

        protected override DbSet<EF.Example.Product> Set { get { return Context.Products; } }

        public override System.Guid GetKeyFromEntity(EF.Example.Product e) {
            return e.OurProductId;
        }

    }
	#endregion
		#region Suppliers repository
	public partial class SuppliersRepository : BaseRepository<ICompanyContext, EF.Example.Supplier, System.Int32>, IBaseRepository<ICompanyContext, EF.Example.Supplier, System.Int32> {

        public SuppliersRepository(ICompanyContext ctx, IProxy<ICompanyContext, EF.Example.Supplier> proxy = null) : base(ctx, proxy) {
        }

		protected override async Task<EF.Example.Supplier> GetAsync(IQueryable<EF.Example.Supplier> query, System.Int32 key) { 
			return await query.FirstOrDefaultAsync(obj => obj.SupplierId == key);
		}

        protected override DbSet<EF.Example.Supplier> Set { get { return Context.Suppliers; } }

        public override System.Int32 GetKeyFromEntity(EF.Example.Supplier e) {
            return e.SupplierId;
        }

    }
	#endregion
		#region Clients repository
	public partial class ClientsRepository : BaseRepository<ICompanyContext, EF.Example.Customer, System.Int32>, IBaseRepository<ICompanyContext, EF.Example.Customer, System.Int32> {

        public ClientsRepository(ICompanyContext ctx, IProxy<ICompanyContext, EF.Example.Customer> proxy = null) : base(ctx, proxy) {
        }

		protected override async Task<EF.Example.Customer> GetAsync(IQueryable<EF.Example.Customer> query, System.Int32 key) { 
			return await query.FirstOrDefaultAsync(obj => obj.CustomerId == key);
		}

        protected override DbSet<EF.Example.Customer> Set { get { return Context.Customers; } }

        public override System.Int32 GetKeyFromEntity(EF.Example.Customer e) {
            return e.CustomerId;
        }

    }
	#endregion
		#region Orders repository
	public partial class OrdersRepository : BaseRepository<ICompanyContext, EF.Example.Order, System.Int32>, IBaseRepository<ICompanyContext, EF.Example.Order, System.Int32> {

        public OrdersRepository(ICompanyContext ctx, IProxy<ICompanyContext, EF.Example.Order> proxy = null) : base(ctx, proxy) {
        }

		protected override async Task<EF.Example.Order> GetAsync(IQueryable<EF.Example.Order> query, System.Int32 key) { 
			return await query.FirstOrDefaultAsync(obj => obj.OrderId == key);
		}

        protected override DbSet<EF.Example.Order> Set { get { return Context.Orders; } }

        public override System.Int32 GetKeyFromEntity(EF.Example.Order e) {
            return e.OrderId;
        }

    }
	#endregion
	
	#region Products controller

			[EnableQuery]
    [ODataRoute("Products")]
    public class ProductsController : BaseController<ICompanyContext, EF.Example.Product, System.Guid, IBaseRepository<ICompanyContext, EF.Example.Product, System.Guid>> {


        public ProductsController(IBaseRepository<ICompanyContext, EF.Example.Product, System.Guid> repo) : base(repo) {
        }

				[HttpGet("({key})/Name")]
        public async Task<IActionResult> GetName(System.Guid key) {
            var entity = await Repository.FindAsync(key);
            return entity == null ? (IActionResult) NotFound() : new ObjectResult(entity.Name);
        }
				[HttpGet("({key})/WholesalePrice")]
        public async Task<IActionResult> GetWholesalePrice(System.Guid key) {
            var entity = await Repository.FindAsync(key);
            return entity == null ? (IActionResult) NotFound() : new ObjectResult(entity.WholesalePrice);
        }
				[HttpGet("({key})/Campaigns")]
        public async Task<IActionResult> GetCampaigns(System.Guid key) {
            var entity = await Repository.FindAsync(key, "Campaigns");
            return entity == null ? (IActionResult) NotFound() : new ObjectResult(entity.Campaigns);
        }
		

    }
	#endregion
		#region Suppliers controller

			[EnableQuery]
    [ODataRoute("Suppliers")]
    public class SuppliersController : BaseController<ICompanyContext, EF.Example.Supplier, System.Int32, IBaseRepository<ICompanyContext, EF.Example.Supplier, System.Int32>> {


        public SuppliersController(IBaseRepository<ICompanyContext, EF.Example.Supplier, System.Int32> repo) : base(repo) {
        }

				[HttpGet("({key})/Name")]
        public async Task<IActionResult> GetName(System.Int32 key) {
            var entity = await Repository.FindAsync(key);
            return entity == null ? (IActionResult) NotFound() : new ObjectResult(entity.Name);
        }
				[HttpGet("({key})/Rating")]
        public async Task<IActionResult> GetRating(System.Int32 key) {
            var entity = await Repository.FindAsync(key);
            return entity == null ? (IActionResult) NotFound() : new ObjectResult(entity.Rating);
        }
				[HttpGet("({key})/ProductsSupplied")]
        public async Task<IActionResult> GetProductsSupplied(System.Int32 key) {
            var entity = await Repository.FindAsync(key, "ProductsSupplied");
            return entity == null ? (IActionResult) NotFound() : new ObjectResult(entity.ProductsSupplied);
        }
		

    }
	#endregion
		#region Clients controller

			[EnableQuery]
    [ODataRoute("Clients")]
    public class ClientsController : BaseController<ICompanyContext, EF.Example.Customer, System.Int32, IBaseRepository<ICompanyContext, EF.Example.Customer, System.Int32>> {


        public ClientsController(IBaseRepository<ICompanyContext, EF.Example.Customer, System.Int32> repo) : base(repo) {
        }

				[HttpGet("({key})/Name")]
        public async Task<IActionResult> GetName(System.Int32 key) {
            var entity = await Repository.FindAsync(key);
            return entity == null ? (IActionResult) NotFound() : new ObjectResult(entity.Name);
        }
				[HttpGet("({key})/Orders")]
        public async Task<IActionResult> GetOrders(System.Int32 key) {
            var entity = await Repository.FindAsync(key, "Orders");
            return entity == null ? (IActionResult) NotFound() : new ObjectResult(entity.Orders);
        }
		

    }
	#endregion
		#region Orders controller

			[EnableQuery]
    [ODataRoute("Orders")]
    public class OrdersController : BaseController<ICompanyContext, EF.Example.Order, System.Int32, IBaseRepository<ICompanyContext, EF.Example.Order, System.Int32>> {


        public OrdersController(IBaseRepository<ICompanyContext, EF.Example.Order, System.Int32> repo) : base(repo) {
        }

				[HttpGet("({key})/Placed")]
        public async Task<IActionResult> GetPlaced(System.Int32 key) {
            var entity = await Repository.FindAsync(key);
            return entity == null ? (IActionResult) NotFound() : new ObjectResult(entity.Placed);
        }
				[HttpGet("({key})/OrderLines")]
        public async Task<IActionResult> GetOrderLines(System.Int32 key) {
            var entity = await Repository.FindAsync(key, "OrderLines");
            return entity == null ? (IActionResult) NotFound() : new ObjectResult(entity.OrderLines);
        }
		

    }
	#endregion
	}