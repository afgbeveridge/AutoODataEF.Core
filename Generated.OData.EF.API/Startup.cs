using API.Generation.Support.Proxies;
using Autogenerated.OData.Api;
using EF.Example;
using Generated.OData.EF.API.Proxies;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;

namespace Generated.OData.EF.API {
    public class Startup
    {
        public Startup(IHostingEnvironment env)
        {
            var builder = new ConfigurationBuilder()
                .SetBasePath(env.ContentRootPath)
                .AddJsonFile("appsettings.json", optional: false, reloadOnChange: true)
                .AddJsonFile($"appsettings.{env.EnvironmentName}.json", optional: true)
                .AddEnvironmentVariables();
            Configuration = builder.Build();
        }

        public IConfigurationRoot Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            // Add framework services.
            services.AddODataEFGenerator();

            services.AddScoped<ICompanyContext, CompanyContext>(_ => {
                var builder = new DbContextOptionsBuilder<CompanyContext>();
                builder.UseSqlServer(Configuration["ConnectionStrings:Default"]);
                return new CompanyContext(builder.Options);
            });

            // Add project specific proxies as needed
            services.AddScoped<IInterventionProxy<ICompanyContext, Customer>, ClientsInterventionProxy>();
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)
        {
            loggerFactory.AddConsole(Configuration.GetSection("Logging"));
            loggerFactory.AddDebug();

            app.UseODataEFGenerator();
        }
    }
}
